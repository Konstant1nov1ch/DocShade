// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	rest_service "document-upload-service/usecases/upload_service"

	mock "github.com/stretchr/testify/mock"
)

// RestService is an autogenerated mock type for the RestService type
type RestService struct {
	mock.Mock
}

// GetHealth provides a mock function with given fields: ctx, data
func (_m *RestService) GetHealth(ctx context.Context, data rest_service.HealthDtoIn) (rest_service.HealthDtoOut, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for GetHealth")
	}

	var r0 rest_service.HealthDtoOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, rest_service.HealthDtoIn) (rest_service.HealthDtoOut, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, rest_service.HealthDtoIn) rest_service.HealthDtoOut); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(rest_service.HealthDtoOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, rest_service.HealthDtoIn) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRestService creates a new instance of RestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestService {
	mock := &RestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
